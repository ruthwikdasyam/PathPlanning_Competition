#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import sys
import select
import tty
import termios
import time
# import acode
import acode_npg

#importing from pyagme code
# timestep = p1pygame.timestep
# wheel_radius = p1pygame.wheel_radius
# track_width = p1pygame.track_width

wheel_radius = 3.3 # r
track_width = 28.7 # L 
timestep = 1




# 40, 80 ----- 580, 60
# action_list = [[4.1887902047863905, 0], [0, 4.1887902047863905], [8.377580409572781, 4.1887902047863905], [4.1887902047863905, 8.377580409572781], [8.377580409572781, 4.1887902047863905], [4.1887902047863905, 4.1887902047863905], [4.1887902047863905, 8.377580409572781], [8.377580409572781, 8.377580409572781], [0, 4.1887902047863905], [0, 4.1887902047863905], [4.1887902047863905, 4.1887902047863905], [4.1887902047863905, 4.1887902047863905], [4.1887902047863905, 4.1887902047863905], [4.1887902047863905, 0], [4.1887902047863905, 4.1887902047863905], [4.1887902047863905, 4.1887902047863905], [4.1887902047863905, 0], [4.1887902047863905, 0], [0, 4.1887902047863905], [8.377580409572781, 4.1887902047863905], [4.1887902047863905, 4.1887902047863905], [4.1887902047863905, 0], [0, 4.1887902047863905], [4.1887902047863905, 0], [4.1887902047863905, 4.1887902047863905], [0, 4.1887902047863905], [8.377580409572781, 4.1887902047863905], [4.1887902047863905, 4.1887902047863905], [4.1887902047863905, 8.377580409572781], [4.1887902047863905, 4.1887902047863905], [4.1887902047863905, 8.377580409572781], [8.377580409572781, 8.377580409572781], [8.377580409572781, 8.377580409572781], [4.1887902047863905, 8.377580409572781], [8.377580409572781, 4.1887902047863905], [4.1887902047863905, 8.377580409572781], [8.377580409572781, 4.1887902047863905], [0, 4.1887902047863905], [8.377580409572781, 4.1887902047863905], [4.1887902047863905, 4.1887902047863905]]

# 37, 75 ------   550,100
# action_list=[[3.874630939427411, 0], [0, 3.874630939427411], [3.874630939427411, 0], [3.874630939427411, 3.874630939427411], [3.874630939427411, 3.874630939427411], [3.874630939427411, 7.853981633974483], [3.874630939427411, 0], [0, 3.874630939427411], [3.874630939427411, 0], [3.874630939427411, 3.874630939427411], [0, 3.874630939427411], [3.874630939427411, 3.874630939427411], [3.874630939427411, 3.874630939427411], [0, 3.874630939427411], [0, 3.874630939427411], [3.874630939427411, 0], [3.874630939427411, 3.874630939427411], [0, 3.874630939427411], [3.874630939427411, 3.874630939427411], [3.874630939427411, 3.874630939427411], [7.853981633974483, 3.874630939427411], [7.853981633974483, 3.874630939427411], [3.874630939427411, 3.874630939427411], [3.874630939427411, 3.874630939427411], [3.874630939427411, 0], [3.874630939427411, 0], [0, 3.874630939427411], [7.853981633974483, 3.874630939427411], [0, 3.874630939427411], [3.874630939427411, 0], [3.874630939427411, 3.874630939427411], [0, 3.874630939427411], [7.853981633974483, 0], [3.874630939427411, 3.874630939427411], [3.874630939427411, 3.874630939427411], [0, 3.874630939427411], [7.853981633974483, 7.853981633974483], [3.874630939427411, 7.853981633974483], [3.874630939427411, 3.874630939427411], [3.874630939427411, 3.874630939427411], [3.874630939427411, 7.853981633974483], [7.853981633974483, 7.853981633974483], [3.874630939427411, 3.874630939427411], [0, 3.874630939427411], [7.853981633974483, 3.874630939427411], [0, 3.874630939427411], [3.874630939427411, 0], [0, 3.874630939427411], [3.874630939427411, 0], [3.874630939427411, 3.874630939427411], [0, 3.874630939427411], [3.874630939427411, 0]]

# 37, 75 -------  580,100
# action_list = [[3.874630939427411, 3.874630939427411], [3.874630939427411, 0], [0, 3.874630939427411], [3.874630939427411, 0], [3.874630939427411, 3.874630939427411], [0, 3.874630939427411], [3.874630939427411, 0], [3.874630939427411, 3.874630939427411], [3.874630939427411, 3.874630939427411], [3.874630939427411, 7.853981633974483], [3.874630939427411, 3.874630939427411], [3.874630939427411, 3.874630939427411], [3.874630939427411, 7.853981633974483], [0, 3.874630939427411], [7.853981633974483, 3.874630939427411], [0, 3.874630939427411], [0, 3.874630939427411], [3.874630939427411, 0], [7.853981633974483, 3.874630939427411], [7.853981633974483, 3.874630939427411], [3.874630939427411, 3.874630939427411], [7.853981633974483, 3.874630939427411], [3.874630939427411, 0], [3.874630939427411, 3.874630939427411], [3.874630939427411, 3.874630939427411], [0, 3.874630939427411], [3.874630939427411, 0], [0, 3.874630939427411], [3.874630939427411, 0], [3.874630939427411, 3.874630939427411], [3.874630939427411, 3.874630939427411], [3.874630939427411, 3.874630939427411], [0, 3.874630939427411], [3.874630939427411, 3.874630939427411], [3.874630939427411, 3.874630939427411], [3.874630939427411, 3.874630939427411], [0, 3.874630939427411], [3.874630939427411, 3.874630939427411], [3.874630939427411, 3.874630939427411], [3.874630939427411, 7.853981633974483], [3.874630939427411, 3.874630939427411], [3.874630939427411, 0], [3.874630939427411, 3.874630939427411], [7.853981633974483, 3.874630939427411], [0, 3.874630939427411], [3.874630939427411, 3.874630939427411], [3.874630939427411, 3.874630939427411], [0, 3.874630939427411], [3.874630939427411, 0], [7.853981633974483, 7.853981633974483], [0, 3.874630939427411], [3.874630939427411, 0], [3.874630939427411, 3.874630939427411]]





action_list = acode_npg.action_list
print(len(action_list))
# action_list.append([0,0])


class KeyboardControlNode(Node):
    def __init__(self):
        super().__init__('keyboard_control_node')
        self.cmd_vel_pub = self.create_publisher(Twist, '/cmd_vel', 10)

    def run_keyboard_control(self):
        velocity_message = Twist()
        linear_vel=0.0
        angular_vel=0.0

        linear_vel_list = []
        angular_vel_list = []

        for i,action in enumerate(action_list):

                linear_vel_cm = (wheel_radius/2)*(action[0]+action[1])
                angular_vel_cm = (wheel_radius/track_width)*(action[1]-action[0])
                
                # need to be corrected accoridng to gazebo's real time factor
                p_linear = 1
                p_angular = 1.02

                linear_vel = (linear_vel_cm/100)*p_linear
                angular_vel = (angular_vel_cm/1)*p_angular

                #printing actions and publishing velocities
                print("\nAction ",i)
                angular_vel_list.append(angular_vel)
                print("Steer Angle",angular_vel)
                linear_vel_list.append(linear_vel)
                print("Linear Velocity",linear_vel)
                
                # Publish the twist message
                velocity_message.linear.x = max(linear_vel, 0.26)
                velocity_message.angular.z = angular_vel
                
                # publish velocities
                self.cmd_vel_pub.publish(velocity_message)
                time.sleep(timestep)

        print("min angular vel ",min(angular_vel_list))
        print("max angular vel ",max(angular_vel_list))
        print("min linear vel ",min(linear_vel_list))
        print("max linear vel ",max(linear_vel_list))
# main
def main(args=None):
    rclpy.init(args=args)
    node = KeyboardControlNode()
    node.run_keyboard_control()
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()